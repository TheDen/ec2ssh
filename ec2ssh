#!/bin/sh
# Script to automatically SSH in an ec2 instance.
# Finds the correct identity key and address if required.
# Accepts hostname or IP address as an argument.
# Stores instances previously connected to in a cache for quick reconnetion.
# Dependencies: awscli

# Don't forget the trailing slash in the identity folder!
identity_dir="$HOME/pem_keys/"
CACHE="$HOME/.ssh/ssh_cache_aws"

# Defaults to root user in the private network
user="root"
network="private"

if [ ! -f "$CACHE" ]; then
    touch "$CACHE"
fi

cachecheck() {
    if grep -qE "^$1\||$1$" "$CACHE"; then
	linematch="$(grep -n "$1" "$CACHE" | awk -F ":" '{print $1}')"
	echo "$1 in cache $CACHE:"$linematch"" 
	echo $(awk '!a[$0]++' "$CACHE" | grep  "$1" | awk -F "|" '{print $2}');
	$(awk '!a[$0]++' "$CACHE" | grep  "$1" | awk -F "|" '{print $2}');
	exit 0;
    else
	echo "$1 not in cache $CACHE..."
    fi
}

keyname() { 
    if [ "$ip" = false ]; then
	ec2name="$1"
	key=$(aws ec2  describe-instances --filters "Name=tag:Name,Values=$1" --query 'Reservations[*].Instances[*].KeyName' --output text)
    else
	key="$(aws ec2  describe-instances --filters "Name=private-ip-address,Values=$1" --query 'Reservations[*].Instances[*].KeyName' --output text)"
	if [ ! -n "$key" ]; then
	    echo "trying public ip address for keyair..."
	    key=$(aws ec2  describe-instances --filters "Name=ip-address,Values=$1" --query 'Reservations[*].Instances[*].KeyName' --output text)
	fi
    fi
    if [ ! -n "$key" ]; then
	echo "Instance identity not found"
	exit 1;
    fi
    identity=$(basename "$(find "$identity_dir" -name "$key*" | head -n 1)")
    #echo "$key"
    echo "Identity: $identity"
}

ipaddress() {
    if [ "$ip" = false ]; then
	if [ "$network" = private ]; then 
	    privip="$(aws ec2  describe-instances --filters "Name=tag:Name,Values=$1" --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text)"
	    sship="$privip"
	    echo "IP: $sship"
	else 
	    pubip="$(aws ec2  describe-instances --filters "Name=tag:Name,Values=$1" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)"
	    sship="$pubip"
	    echo "IP: $sship"
	fi
    else
	ec2name="$(aws ec2  describe-instances --filters "Name=private-ip-address,Values=$1" --query 'Reservations[*].Instances[*].KeyName' --output text)"
        if [ ! -n "$ec2name" ]; then
	    echo "trying public ip address..."
	    ec2name="$(aws ec2  describe-instances --filters "Name=ip-address,Values=$1" --query 'Reservations[*].Instances[*].KeyName' --output text)"
        fi
	sship="$1"
	echo "IP: $sship"
    fi
    
    if [ ! -n "$sship" ]; then
	echo "Instance identity not found"
	exit 1;
    fi
}

sshcheck() {
#    printf "$ec2name|ssh -i $identity_dir$identity "$1"@$2\n" >> "$CACHE"
    printf "%s|ssh -i %s%s %s@%s\n" "$ec2name" "$identity_dir" "$identity" "$1" "$2" >> "$CACHE"
    awk '!a[$0]++' "$CACHE" | awk 'NF' > "$CACHE.new"; mv "$CACHE" "$CACHE.bak"; mv "$CACHE.new" "$CACHE"
    echo "Added to cache $CACHE"
    echo "ssh -i $identity_dir$identity "$1"@$2"
    ssh -i "$identity_dir$identity" "$1"@"$2"
}

while getopts ":u:p" opt; do
    case $opt in
	u)
	    user="$OPTARG"
	    ;;
	p)
            network="public"
            ;;
	\?)
	    echo "Invalid option: -"$OPTARG"" 
	    exit 1
	    ;;
	:)
	    echo "Option -"$OPTARG" requires an argument"
	    exit 1
	    ;;
    esac
done
shift $((OPTIND -1))

if [ ! -n "$1" ]; then
    printf "Usage: ec2ssh [ OPTIONS ] HOST\n\nHOST: Instance name or IP address\nOptions:
   -u\tChoose which user to ssh as, e.g. \"ec2ssh -u ec2-user instance-id\". Default is root
   -p\tSwitch uses the instances public ip to ssh. Default is the private ip\n"
    exit 1;
fi

if [ $# = 1 ] ; then
    if echo "$1" | grep -Eq "^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$"; then
	ip=true
    else
        ip=false
    fi
else 
    echo "Unknown paramters or extra arguments"
    exit 1;
fi

cachecheck "$1"
keyname "$1"
ipaddress "$1"
sshcheck "$user" "$sship"